@page "/stock"
@using Shop.DataModels.CustomModels;
@using Shop.Admin.Services;
@inject IAdminPanelService adminPanelService;

<style>

    .modal {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        display: block;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        overflow: hidden;
    }

    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>

<div class="card">
    <h4 class="card-header"> Stock</h4>

    <div class="card-body">
        @if (stockList == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table table-striped table-bordered bg-light">
                <thead>
                    <tr>
                        <th style="width:15px;">Sr.No</th>
                        <th> Name</th>
                        <th> Stock</th>
                        <th>Category</th>
                        <th style="width:80px;">AddStock?</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (index, stk) in stockList.Select((stk, i) => (i + 1, stk)))
                    {
                        <tr>
                            <td>@index</td>
                            <td>@stk.Name</td>
                            <td>@stk.Stock</td>
                            <td>@stk.CategoryName</td>
                            <td> <input type="button" class="btn btn-primary" value="AddStock" @onclick="(() => AddButtonClick(stk))" /></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@if (showAddPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Add Product Stock</h5>
                <span class="close" @onclick="ToggleAddPopup">&times;</span>
            </div>
            <div class="modal-body">
                <EditForm Model="@stockToUpdate" OnValidSubmit="UpdateButtonClick">
                    <DataAnnotationsValidator />
                    <div class="form-row">
                        <div class="form-group col-6">
                            <label>Product Name :</label>
                            <label>@stockToUpdate.Name</label>
                        </div>
                        <div class="form-group col-6">
                            <label>Available Stock :</label>
                            <label>@stockToUpdate.Stock</label>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-6">
                            New Stock :
                            <InputNumber @bind-Value="stockToUpdate.NewStock" class="form-control" />
                            <ValidationMessage For="@(() => stockToUpdate.NewStock)" />
                        </div>
                        <div class="form-group col-6">
                            <label>Total Stock :</label>
                            <br />
                            <label>@(stockToUpdate.Stock + stockToUpdate.NewStock)</label>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Update Stock" @onclick="UpdateButtonClick" />
                <input type="button" class="btn btn-primary" value="Cancel" @onclick="ToggleAddPopup" />
            </div>
        </div>
    </div>
}

@if (successPoupup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Alert  <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
            </div>
        </div>
    </div>
}


@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }
    string Message = string.Empty;
    public bool successPoupup = false;
    public bool showAddPopup = false;
    public List<StockModel> stockList { get; set; }
    public StockModel stockToUpdate = null;

    protected override async Task OnInitializedAsync()
    {
        await GetProductStock();
    }

    private void ToggleSuccessPopup()
    {
        successPoupup = successPoupup == true ? false : true;
    }

    private void ToggleAddPopup()
    {
        showAddPopup = showAddPopup == true ? false : true;
    }

    private void AddButtonClick(StockModel _stock)
    {
        stockToUpdate = _stock;
        ToggleAddPopup();
    }

    private async Task UpdateButtonClick()
    {
        bool flag = await adminPanelService.UpdateProductStock(stockToUpdate);
        ToggleAddPopup();
        if (flag)
        {
            Message = "Product Stock Updated Successfully !!";
        }
        else
        {
            Message = "Product Stock Not Updated Try Again !!";
        }

        ToggleSuccessPopup();
        stockToUpdate = new StockModel();
        await GetProductStock();
    }

    private async Task GetProductStock()
    {
        stockList = await adminPanelService.GetProductStock();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }
}
