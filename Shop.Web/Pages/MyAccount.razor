@page "/myaccount"
@using Shop.DataModels.Models;
@using Shop.DataModels.CustomModels;
@using Shop.Web.Services;
@inject IUserPanelService userPanelService
@inject ProtectedSessionStorage sessionStorage;
@inject NavigationManager navManager;

<style>

    .column {
        float: left;
        padding: 4px;
    }

    .clearfix::after {
        content: "";
        clear: both;
        display: table;
    }

    .menu {
        width: 25%;
        margin-top: 5px;
        color: black;
    }

    .content {
        width: 75%;
    }

    a {
        cursor: pointer;
    }

    .vertical-menu {
        width: 200px;
        border: 2px ridge #bacf67;
    }

        .vertical-menu a {
            background-color: #eee;
            color: black;
            display: block;
            padding: 12px;
            text-decoration: none;
        }

            .vertical-menu a:hover {
                background-color: #ccc;
            }

            .vertical-menu a.active {
                background-color: #bacf67;
                color: white;
            }


    .card {
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        max-width: 300px;
        margin: auto;
        text-align: center;
        font-family: arial;
    }

    .title {
        color: grey;
        font-size: 18px;
    }
</style>

<style>

    .modal {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        display: block;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        overflow: hidden;
    }

    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>

<div style="min-height: 400px;">

    <div class="column menu" style="background-color:white;border-radius:15px;">
        <div class="vertical-menu">
            <a class="@(myAccountFlag? "active" : "")" @onclick='(() => ChangeActiveMenu("MyAccount"))'>My Account</a>
            <a class="@(changePasswordFlag? "active" : "")" @onclick='(() => ChangeActiveMenu("ChangePassword"))'>Change Password</a>
            <a class="@(orderHistoryFlag? "active" : "")" @onclick='(() => ChangeActiveMenu("OrderHistory"))'>Order History</a>
        </div>
    </div>

    <div class="column content">
        <div style="border:2px ridge #bacf67;padding:10px; border-radius:15px;">
            <div style="border-bottom:2px ridge #bacf67;"> <h4>@headerText</h4></div>

            @if (myAccountFlag)
            {
                <div style="width:200px;">
                    <div class="card">
                        <img src="./images/user_icon.png" alt="Profile" style="width:100%">
                        <p>Name: @userName</p>
                        <p>Email:@userEmail</p>
                    </div>
                </div>
            }

            @if (changePasswordFlag)
            {
                <div style="width:400px;">
                    <div class="form-group">
                        <EditForm Model="@passwordModel" OnValidSubmit="ChangePassword_Click">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label>Old Password:</label>
                                <InputText type="text" class="form-control" id="oldpwd" @bind-Value="passwordModel.OldPassword" autocomplete="off"></InputText>
                                <ValidationMessage For="@(() => passwordModel.OldPassword)" />
                            </div>
                            <div class="form-group">
                                <label>New Password:</label>
                                <InputText type="text" class="form-control" id="newpwd" @bind-Value="passwordModel.Password" autocomplete="off"></InputText>
                                <ValidationMessage For="@(() => passwordModel.Password)" />
                            </div>
                            <div class="form-group">
                                <label>Confirm Password:</label>
                                <InputText type="text" class="form-control" id="confirmpwd" @bind-Value="passwordModel.ConfirmPassword" autocomplete="off"></InputText>
                                <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
                            </div>
                            <div class="form-group">
                                <button type="submit" class="btn btn-primary">Submit</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }

            @if (orderHistoryFlag)
            {
                <table class="table table-striped table-bordered bg-light">
                    <thead>
                        <tr>
                            <th>Order #</th>
                            <th>Total #</th>
                            <th>Order Date #</th>
                            <th style="width:80px;">Track?</th>
                            <th style="width:80px;">Details?</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var odr in customerOrders)
                        {
                            <tr>
                                <td>@odr.OrderId</td>
                                <td>@odr.Total</td>
                                <td>@odr.CreatedOn</td>
                                <td>
                                    <input type="button" class="btn btn-primary" value="Track" @onclick="(() => Track_Click(odr.OrderId))" />
                                </td>
                                <td>
                                    <input type="button" class="btn btn-secondary" value="Detail" @onclick="(() => Detail_Click(odr.OrderId))" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </div>
    </div>

</div>

@if (showTrackOrder == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Track Order  </h5>
                <span class="close" @onclick="ToggleTrackOrderPopup">&times;</span>
            </div>
            <div class="modal-body">
                @if (shippingUpdates != null && shippingUpdates.Count > 0)
                {
                    <table>
                        <tbody>
                            @foreach (var odr in shippingUpdates)
                            {
                                <tr>
                                    <td>@odr</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <span>No update on order shipping. please check after some time</span>
                }
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleTrackOrderPopup" />
            </div>
        </div>
    </div>
}

@if (showOrderDetail == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5> Order Details  </h5>
                <span class="close" @onclick="ToggleOrderDetailPopup">&times;</span>
            </div>
            <div class="modal-body">

                @if (@myCart != null && @myCart.Count > 0)
                {
                    <table class="table table-bordered">
                        @foreach (var cart in myCart)
                        {
                            <tr>
                                <td style="padding:0px;">
                                    <img src="http://localhost:38956/@cart.ProductImage" alt="Product Photo" style="width:50px;height:50px;" />
                                    <div>
                                        <p>@cart.ProductName</p>
                                    </div>
                                </td>
                                <td style="padding:0px;">@cart.Quantity X ₹@cart.Price </td>
                                <td style="padding:0px;">₹@(cart.Price*cart.Quantity).00</td>
                            </tr>
                        }
                    </table>

                    <table style="width:550px;border:1px ridge #f5750d;">
                        <tr>
                            <td>Subtotal - ₹@subTotal.00</td>
                            <td>Shipping Charges - ₹@shippingCharges.00</td>
                        </tr>
                        <tr>
                            <td>Total - ₹@finalTotal.00</td>
                            <td>Shipping Address - @shippingAddress</td>
                        </tr>
                        <tr>
                            <td>Payment Mode- @paymentMode</td>
                        </tr>
                    </table>
                }
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-secondary" value="Close" @onclick="ToggleOrderDetailPopup" />
            </div>
        </div>
    </div>
}

@if (showAlertMessage == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Alert </h5>
                <span class="close" @onclick="ToggleAlertMessage">&times;</span>
            </div>
            <div class="modal-body">
                @alertMessage
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleAlertMessage" />
            </div>
        </div>
    </div>
}



@code {

    private string headerText = "MyAccount";
    private int userKey = 0;
    private string userName = string.Empty;
    private string userEmail = string.Empty;
    private string alertMessage = string.Empty;
    private bool myAccountFlag = true;
    private bool changePasswordFlag = false;
    private bool orderHistoryFlag = false;
    public bool showTrackOrder = false;
    public bool showOrderDetail = false;
    public bool showAlertMessage = false;
    private List<ProductModel> products;
    private List<CustomerOrder> customerOrders;
    private PasswordModel passwordModel;
    private ResponseModel response;
    public List<string> shippingUpdates { get; set; }

    public List<CartModel> myCart { get; set; }
    public string shippingAddress { get; set; }
    public int shippingCharges { get; set; }
    public string paymentMode { get; set; }
    public int subTotal { get; set; }
    public int finalTotal { get; set; }

    protected override Task OnInitializedAsync()
    {
        products = new List<ProductModel>();
        customerOrders = new List<CustomerOrder>();
        passwordModel = new PasswordModel();
        return base.OnInitializedAsync();
    }

    private async Task ChangeActiveMenu(string menu)
    {
        headerText = menu;
        switch (menu)
        {
            case "MyAccount":
                myAccountFlag = true;
                changePasswordFlag = false;
                orderHistoryFlag = false;
                break;

            case "ChangePassword":
                myAccountFlag = false;
                changePasswordFlag = true;
                orderHistoryFlag = false;
                break;

            case "OrderHistory":
                myAccountFlag = false;
                changePasswordFlag = false;
                orderHistoryFlag = true;
                await GetOrdersByCustomerId(userKey);
                break;
        }
    }

    private async Task GetOrdersByCustomerId(int customerId)
    {
        if (customerOrders.Count == 0)
        {
            customerOrders = await userPanelService.GetOrdersByCustomerId(customerId);
        }
    }

    private void ToggleAlertMessage()
    {
        showAlertMessage = showAlertMessage == true ? false : true;
    }

    private void ToggleOrderDetailPopup()
    {
        showOrderDetail = showOrderDetail == true ? false : true;
    }

    private void ToggleTrackOrderPopup()
    {
        showTrackOrder = showTrackOrder == true ? false : true;
    }

    private async Task GetOrderDetailForCustomer(int customerId, string order_number)
    {
        myCart = await userPanelService.GetOrderDetailForCustomer(customerId, order_number);

        if (myCart != null && myCart.Count > 0)
        {
            shippingAddress = myCart.FirstOrDefault().ShippingAddress;
            shippingCharges = myCart.FirstOrDefault().ShippingCharges;
            subTotal = myCart.FirstOrDefault().SubTotal;
            finalTotal = myCart.FirstOrDefault().Total;
            paymentMode = myCart.FirstOrDefault().PaymentMode;
        }
    }

    private async Task Detail_Click(string order_number)
    {
        await GetOrderDetailForCustomer(userKey, order_number);
        ToggleOrderDetailPopup();
    }

    private async Task Track_Click(string order_number)
    {
        shippingUpdates = await userPanelService.GetShippingStatusForOrder(order_number);
        ToggleTrackOrderPopup();
    }

    private async Task ChangePassword_Click()
    {
        if (passwordModel.Password != passwordModel.ConfirmPassword)
        {
            alertMessage = "Password & Confirm password are not same";
            ToggleAlertMessage();
        }
        else
        {
            passwordModel.UserKey = userKey;
            response = await userPanelService.ChangePassword(passwordModel);
            if (response.Status)
            {
                passwordModel = new PasswordModel();
                alertMessage = response.Message;
                ToggleAlertMessage();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var session_userKey = await sessionStorage.GetAsync<string>("userKey");
            var session_userName = await sessionStorage.GetAsync<string>("userName");
            var session_userEmail = await sessionStorage.GetAsync<string>("userEmail");
            if (session_userName.Success && session_userEmail.Success && session_userKey.Success)
            {
                userKey = Convert.ToInt32(session_userKey.Value);
                userName = session_userName.Value;
                userEmail = session_userEmail.Value;
            }

            var session_latestOrder = await sessionStorage.GetAsync<string>("latestOrder");
            if (session_latestOrder.Success)
            {
                await sessionStorage.DeleteAsync("latestOrder");
                await GetOrdersByCustomerId(userKey);
                await ChangeActiveMenu("OrderHistory");
            }

            StateHasChanged();
        }
    }

}
